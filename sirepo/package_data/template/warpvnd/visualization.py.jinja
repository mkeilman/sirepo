
#prevent GIST from starting upon setup
wp.top.lprntpara = False
wp.top.lpsplots = False

wp.top.verbosity = 0 # Reduce solver verbosity
solverE.mgverbose = 0 #further reduce output upon stepping - prevents websocket timeouts in Jupyter notebook
solverE.mgmaxiters = 12000 #rough approximation needed for initial solve to converge
wp.package("w3d")
wp.generate()
solverE.mgmaxiters = 100

#------

from warp.particles.singleparticle import TraceParticle
def get_MB_velocities(n_part, T):
    '''Return a distribution of particle velocities representing a Maxwell-Boltzmann
    distribution.

    Each velocity distribution is a temperature dependent Gaussian. Due to the geometry
    of the cathode, negative longitudinal velocities are discarded. The individual
    velocity distributions are assumed to be independent, and hence there is no covariance
    between them.

    Arguments:
    n_part (int): number of particles to be used in the distribution
    T (float): temperature of the cathode in K

    Returns:
    pos_output (ndArray): n_part x 3 array with (vx,vy,vz) values for each particle

    '''
    var_xy = kb_J*T/constants.m_e #Define the variance of the distribution in the x,y planes
    var_z = 2*kb_J*T/constants.m_e #Variance in z plane is twice that in the horizontal
    var_vs = np.asarray([var_xy,var_xy,var_z])
    mean = [0,0,0] #Each distribution has a native mean of 0.
    cov = np.multiply(var_vs,np.identity(3)) #distributions are assumed to be independent
    #mean_vz = np.sqrt(2*var/np.pi) #compute this from all-positive component of distribution

    #Additional values are computed so that tuples with negative vz can be discarded
    flag_array_full = False
    while not flag_array_full:
        output = np.random.multivariate_normal(mean,cov,int(np.round(n_part*3)))
        pos_output = output[np.where(output[:,2] > 0.)[0]]
        if pos_output.shape[0] >= n_part:
            flag_array_full = True

    return pos_output[:n_part]

electrons_tracked_t0 = wp.Species(type=wp.Electron)
v_coords = get_MB_velocities(PTCL_PER_STEP,CATHODE_TEMP)
x_vals = CHANNEL_WIDTH*(np.random.rand(PTCL_PER_STEP)-0.5)
y_vals = CHANNEL_HEIGHT*(np.random.rand(PTCL_PER_STEP)-0.5)
z_vals = np.zeros(PTCL_PER_STEP) + Z_PART_MIN #Add a minimum z coordinate to prevent absorption
eptclArray = np.asarray([x_vals,v_coords[:,0],y_vals,v_coords[:,1],z_vals,v_coords[:,2]]).T
electron_tracker_0 = TraceParticle(js=electrons_tracked_t0.jslist[0],
                                   x=eptclArray[:,0],
                                   y=eptclArray[:,2],
                                   z=eptclArray[:,4],
                                   vx=np.zeros_like(eptclArray[:,0]),
                                   vy=np.zeros_like(eptclArray[:,0]),
                                   vz=eptclArray[:,5])


def is_lost_particle(trace, electron, step):
    return abs(
        trace.getx(i=electron)[step] -
        trace.getx(i=electron)[step + 1]) > (X_MAX - X_MIN) / 2. \
        or abs(
            trace.gety(i=electron)[step] -
            trace.gety(i=electron)[step + 1]) > (Y_MAX - Y_MIN) / 2.


def particle_trace(trace,ntrack):
    kept = [[], [], []]
    lost = [[], [], []]
    for electron in range(ntrack):
        for step in range(len(trace.getx(i=electron)) - 1):
            if is_lost_particle(trace, electron, step):
                lost[0].append(trace.getx(i=electron)[0:step])
                lost[1].append(trace.getz(i=electron)[0:step])
                lost[2].append(trace.gety(i=electron)[0:step])
                break
            if step == (len(trace.getx(i=electron)) - 2):
                kept[0].append(trace.getx(i=electron))
                kept[1].append(trace.getz(i=electron))
                kept[2].append(trace.gety(i=electron))
    return kept, lost

#------
import time

#%%time
num_steps = {{ simulationGrid_num_steps }}
output_steps = np.linspace(0,num_steps,num_steps/particleperiod + 1)[1:]
step_count = 0
time0 = time.time()
wp.step(num_steps)
time1 = time.time()
time_per_step = (time1-time0)/num_steps

kept_electrons, lost_electrons = particle_trace(electron_tracker_0, electron_tracker_0.nn)
hf = h5py.File('{{ particleFile }}')
dict_to_h5(
    {
        'kept': kept_electrons,
        'lost': lost_electrons
    },
    hf, path='particle'
)
hf.close()
